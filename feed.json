{
    "version": "https://jsonfeed.org/version/1",
    "title": "Xiyi's Blog",
    "subtitle": "希夷的博客",
    "icon": "https://27e7dyy38eu.github.io/images/favicon.ico",
    "description": "方生方死 方死方生",
    "home_page_url": "https://27e7dyy38eu.github.io",
    "items": [
        {
            "id": "https://27e7dyy38eu.github.io/2024/12/14/Keyboard-SCA/",
            "url": "https://27e7dyy38eu.github.io/2024/12/14/Keyboard-SCA/",
            "title": "简单SCA：如何使用一部手机得到键盘输入",
            "date_published": "2024-12-14T10:14:38.000Z",
            "content_html": "<h1 id=\"简单sca如何使用一部手机得到键盘输入\"><a class=\"anchor\" href=\"#简单sca如何使用一部手机得到键盘输入\">#</a> <strong>简单 SCA：如何使用一部手机得到键盘输入</strong></h1>\n<blockquote>\n<p><strong>本文由于数据量小，仅作为可行性分析验证实验！</strong></p>\n</blockquote>\n<h2 id=\"攻击思路\"><a class=\"anchor\" href=\"#攻击思路\">#</a> <strong>攻击思路</strong></h2>\n<blockquote>\n<p><strong>重要前提：所有操作和采集的数据都是在极其理想的环境下进行的，即攻击环境无可听噪声、键盘响声十分明显的环境</strong><br />\n首先我们应该对攻击对象：键盘，和攻击手段：双麦克风手机，进行细致分析。论文《Snooping Keystrokes with mm-level Audio Ranging on a Single Phone》[1] 可作为分析支撑！<br />\n<strong>下面是论文的分析。但值得注意的是，我们并不需要严格的按照论文对键位进行分类，以实际分析为准，本文实验便是如此。</strong></p>\n</blockquote>\n<h3 id=\"tdoa到达时间差差异\"><a class=\"anchor\" href=\"#tdoa到达时间差差异\">#</a> <em>TDoA (到达时间差) 差异</em></h3>\n<blockquote>\n<p>TDoA 可以将部分键位区别，论文《KeystrokeSniffer: An Off-the-Shelf Smartphone Can Eavesdrop on Your Privacy From Anywhere》[2] 可作为分析支撑！<br />\n下图（来自论文 [2]）可以分析出，某些键位的 TDoA 值是不同的，且所有键位的 TDoA 值按每列从左到右，每行自上而下排列，会呈现一定规律。该论文也指出两条声波迹的 TDoA 可以通过互相关计算。<br />\n<img data-src=\"https://i.postimg.cc/vmy2XqWG/2024-12-14-192348.png\" alt=\"2024-12-14-192348.png\" /></p>\n</blockquote>\n<blockquote>\n<p>从下图（来自论文 [1]）可以分析出，TDoA 值相同的键位（如：E、D、X 的分布为一精致的双曲线的一半）。<br />\n因此可以将 28 个键位（a-z、space、enter）按 TDoA 值的相近程度划分为几个集合（如：[q]、[w,a]、[s,z]、[e,d,x]、[r,f,c]、[t,g,v] 等）。<br />\n这时，我们已经将猜测域大大缩小，从 n<sup>27</sup> 缩小到 n^14（n 为键盘输入个数，指数是 27 和 14 而不是 28 和 15 的原因是 enter 键一般不作为密码输入）<br />\n<img data-src=\"https://i.postimg.cc/jjG0sQf9/2024-10-18-124832.png\" alt=\"2024-10-18-124832.png\" /></p>\n</blockquote>\n<h3 id=\"rms均方根差异\"><a class=\"anchor\" href=\"#rms均方根差异\">#</a> <em>RMS (均方根) 差异</em></h3>\n<blockquote>\n<p>我们已经缩小了猜测域，但是 n^14 仍然太大了！我们总是希望能更精确的区别出每个对象。<br />\n我们小学就学过平面直角坐标系，确定坐标系内一点需要两个指标 x 和 y，我们的 x 已经找到了（就是 TDoA!）。接下来就是寻找另一个指标，这个指标需要满足能将 TDoA 值相同的键位区别开来，这里我选择了 RMS，用来衡量键位距离手机麦克风的远近，这是基于一个朴素的思想，即在相同的击键力度下（现实难以实现），键位离手机越近，声波中携带的能量越大。但该方法存在很大缺陷！这也是亟待改进的地方。<br />\n可以知道，同一 TDoA 键位集合内位于键盘第一行（从上至下）的键位的 RMS 大于第二行，而第二行的 RMS 大于第三行，如下图 [e,s,z]<br />\n 下图表明了该方法有一定作用。<br />\n<img data-src=\"https://i.postimg.cc/3wZSqXBm/2024-12-14-192322.png\" alt=\"2024-12-14-192322.png\" /></p>\n</blockquote>\n<h2 id=\"攻击步骤\"><a class=\"anchor\" href=\"#攻击步骤\">#</a> <strong>攻击步骤</strong></h2>\n<blockquote>\n<p>通过上面的的分析我们已经知道攻击需要得到的两个指标 ----TDoA 和 RMS<br />\n 因此加下来的攻击步骤就是围绕如何得到 TDoA 和 RMS 展开的。</p>\n</blockquote>\n<h3 id=\"手机采集音频\"><a class=\"anchor\" href=\"#手机采集音频\">#</a> <em>手机采集音频</em></h3>\n<blockquote>\n<p><em><strong>一定要使两个麦克风的连线平行于键盘！！！<br />\n一定要使两个麦克风的连线平行于键盘！！！<br />\n一定要使两个麦克风的连线平行于键盘！！！</strong></em><br />\n键盘为青轴，实验手机为 HUAWEI 畅享 20。实验手机倾斜是因为麦克风不对称。<br />\n我的实验环境如下图所示：<br />\n<img data-src=\"https://i.postimg.cc/QChP6jvN/QQ-20241214201427.jpg\" alt=\"QQ-20241214201427.jpg\" /><br />\n 录制方法为每个键位连续击键多下为一个音频文件（本实验为连续 5 下），音波图（q 键连击 5 下，及左右声道）如下：<br />\n<img data-src=\"https://i.postimg.cc/qRxhfGDc/Figu2.png\" alt=\"Figu2.png\" /></p>\n</blockquote>\n<h3 id=\"音频处理\"><a class=\"anchor\" href=\"#音频处理\">#</a> <em>音频处理</em></h3>\n<h4 id=\"音频格式转换m4a-to-wav\"><a class=\"anchor\" href=\"#音频格式转换m4a-to-wav\">#</a> 音频格式转换（.m4a to .wav）</h4>\n<blockquote>\n<p>有在线网站可转换</p>\n</blockquote>\n<h4 id=\"去噪\"><a class=\"anchor\" href=\"#去噪\">#</a> 去噪</h4>\n<blockquote>\n<p>出于简化的目的，且环境较理想，该步省略。真实攻击必定需要去噪！！！</p>\n</blockquote>\n<h4 id=\"左右声道分割\"><a class=\"anchor\" href=\"#左右声道分割\">#</a> 左右声道分割</h4>\n<blockquote>\n<p>由于手机录音成一个.m4a 文件，转为.wav 后，我们需要将左右声道分离，为互相关计算 TDoA 做准备。<br />\n得到音频如下图所示：<br />\n<img data-src=\"https://i.postimg.cc/qRxhfGDc/Figu2.png\" alt=\"Figu2.png\" /><br />\n 代码如下：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">from scipy.io import wavfile</span><br><span class=\"line\"></span><br><span class=\"line\">def get_file_list(file_dir):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    获取文件列表</span><br><span class=\"line\">    :param file_dir:</span><br><span class=\"line\">    :return:</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    file_list = []</span><br><span class=\"line\">    for root, dirs, files in os.walk(file_dir):</span><br><span class=\"line\">        for file in files:</span><br><span class=\"line\">            if os.path.splitext(file)[1] == &#x27;.wav&#x27;:</span><br><span class=\"line\">                file_list.append(os.path.join(root, file))</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                continue</span><br><span class=\"line\">    return file_list</span><br><span class=\"line\"></span><br><span class=\"line\">def split_channel(wav_path, left_wav_path, right_wav_path):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    通道分离</span><br><span class=\"line\">    :param wav_path: wav音频的路径</span><br><span class=\"line\">    :param left_wav_path: 左声道的wav音频路径</span><br><span class=\"line\">    :param right_wav_path: 右声道的wav音频路径</span><br><span class=\"line\">    :return None:</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        sample_rate, wav_data = wavfile.read(wav_path)</span><br><span class=\"line\">        print(wav_data)</span><br><span class=\"line\">        print(sample_rate)</span><br><span class=\"line\">        left = []</span><br><span class=\"line\">        right = []</span><br><span class=\"line\">        for item in wav_data:</span><br><span class=\"line\">            left.append(item[0])</span><br><span class=\"line\">            right.append(item[1])</span><br><span class=\"line\">        wavfile.write(left_wav_path, sample_rate, np.array(left))</span><br><span class=\"line\">        wavfile.write(right_wav_path, sample_rate, np.array(right))</span><br><span class=\"line\">    except IOError as e:</span><br><span class=\"line\">        print(&#x27;error is %s&#x27; % str(e))</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        print(&#x27;other error&#x27;, sys.exc_info())</span><br><span class=\"line\"></span><br><span class=\"line\">FILE_INPUT = r&#x27;keystorke_2/before&#x27;</span><br><span class=\"line\">FILE_LEFT = r&#x27;keystorke_2/after/&#x27;</span><br><span class=\"line\">FILE_RIGHT = r&#x27;keystorke_2/after/&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    file_list = get_file_list(FILE_INPUT)</span><br><span class=\"line\">    print(file_list)</span><br><span class=\"line\">    i = 0</span><br><span class=\"line\">    while i &lt; len(file_list):</span><br><span class=\"line\">        print(file_list[i])</span><br><span class=\"line\">        split_channel(file_list[i], FILE_LEFT + file_list[i][19] +&#x27;_left&#x27;+ &#x27;.wav&#x27;, FILE_RIGHT + file_list[i][19] +&#x27;_right&#x27; + &#x27;.wav&#x27;)</span><br><span class=\"line\">        i += 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"左右声道互相关计算tdoa\"><a class=\"anchor\" href=\"#左右声道互相关计算tdoa\">#</a> <em>左右声道互相关计算 TDoA</em></h3>\n<blockquote>\n<p>注意这里用到了左右两个音频文件。<br />\n可视化如下：<br />\n<img data-src=\"https://i.postimg.cc/rshDswkK/corr.png\" alt=\"corr.png\" /><br />\n 代码如下：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import wave</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">def get_file_list(file_dir):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    获取文件列表</span><br><span class=\"line\">    :param file_dir:</span><br><span class=\"line\">    :return:</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    file_list = []</span><br><span class=\"line\">    for root, dirs, files in os.walk(file_dir):</span><br><span class=\"line\">        for file in files:</span><br><span class=\"line\">            if os.path.splitext(file)[1] == &#x27;.wav&#x27;:</span><br><span class=\"line\">                file_list.append(os.path.join(root, file))</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                continue</span><br><span class=\"line\">    return file_list</span><br><span class=\"line\"></span><br><span class=\"line\">INPUT_FILE = r&quot;keystorke_2/after&quot;</span><br><span class=\"line\">file_list = get_file_list(INPUT_FILE)</span><br><span class=\"line\">i = 0</span><br><span class=\"line\">while i &lt; len(file_list):</span><br><span class=\"line\">    INPUT_FILE_RIGHT= file_list[i]</span><br><span class=\"line\">    INPUT_FILE_LEFT = file_list[i+1]</span><br><span class=\"line\"></span><br><span class=\"line\">    f_left = wave.open(INPUT_FILE_LEFT, &quot;rb&quot;)</span><br><span class=\"line\">    f_right = wave.open(INPUT_FILE_RIGHT, &quot;rb&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    parameters_left = f_left.getparams()</span><br><span class=\"line\">    parameters_right = f_right.getparams()</span><br><span class=\"line\">    sr = parameters_left.framerate</span><br><span class=\"line\"></span><br><span class=\"line\">    str_byte_data_left = f_left.readframes(parameters_left.nframes)</span><br><span class=\"line\">    str_byte_data_right = f_right.readframes(parameters_right.nframes)</span><br><span class=\"line\"></span><br><span class=\"line\">    wave_data_left = np.frombuffer(str_byte_data_left, dtype=np.int16)</span><br><span class=\"line\">    wave_data_right = np.frombuffer(str_byte_data_right, dtype=np.int16)</span><br><span class=\"line\">    # 归一化</span><br><span class=\"line\">    wave_data_left = wave_data_left * 1.0 / (max(abs(wave_data_left)))</span><br><span class=\"line\">    wave_data_right = wave_data_right * 1.0 / (max(abs(wave_data_right)))</span><br><span class=\"line\"></span><br><span class=\"line\">    #通过计算互相关计算时间延迟</span><br><span class=\"line\">    correlation = np.correlate(wave_data_left, wave_data_right, mode=&#x27;full&#x27;)</span><br><span class=\"line\">    max_corr_index = np.argmax(correlation)</span><br><span class=\"line\">    time_delay = max_corr_index - (len(wave_data_left) - 1)</span><br><span class=\"line\">    TDoAt = time_delay/sr #s</span><br><span class=\"line\">    print(&quot;file = &quot;, file_list[i],end=&#x27; &#x27;)</span><br><span class=\"line\">    print(&quot;TDoAt = &quot;, TDoAt)</span><br><span class=\"line\">    i = i + 2</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"计算rms\"><a class=\"anchor\" href=\"#计算rms\">#</a> <em>计算 RMS</em></h3>\n<blockquote>\n<p>注意这里用只到了一个音频文件。<br />\n可视化如下：<br />\n<img data-src=\"https://i.postimg.cc/MKFc8H5L/RMS.png\" alt=\"RMS.png\" /><br />\n 代码如下：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import librosa</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">INPUT_FILE1 = r&quot;keystorke/after_1/p_left.wav&quot;</span><br><span class=\"line\">RMS_THRESHOLD = 0.0075</span><br><span class=\"line\">RMS_UPPER_BOUND = 4</span><br><span class=\"line\">RMS_LOWER_BOUND = 20</span><br><span class=\"line\">FRAME_LENGTH = 512#8192</span><br><span class=\"line\">HOP_LENGTH = int(FRAME_LENGTH * 0.5)</span><br><span class=\"line\"></span><br><span class=\"line\">#计算 RMS</span><br><span class=\"line\">waveform_1, sr_1 = librosa.load(INPUT_FILE1, sr=None)</span><br><span class=\"line\">RMS_1 = librosa.feature.rms(y=waveform_1, frame_length=FRAME_LENGTH, hop_length=HOP_LENGTH)</span><br><span class=\"line\">RMS_1 = np.mean(RMS_1, axis=0)</span><br><span class=\"line\"></span><br><span class=\"line\">#可视化</span><br><span class=\"line\">plt.title(&quot;Time-RMS&quot;)</span><br><span class=\"line\">plt.xlabel(&quot;Time&quot;)</span><br><span class=\"line\">plt.ylabel(&quot;RMS&quot;)</span><br><span class=\"line\">plt.plot(RMS_1, label=&quot;y&quot;, color=&quot;red&quot;)</span><br><span class=\"line\">plt.plot(RMS_2, label=&quot;h&quot;, color=&quot;green&quot;)</span><br><span class=\"line\"># plt.plot(RMS_3, label=&quot;n&quot;, color=&quot;blue&quot;)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"统计分析\"><a class=\"anchor\" href=\"#统计分析\">#</a> <em>统计分析</em></h3>\n<blockquote>\n<p>通过计算得到每个音频对应的 TDoA 和 RMS 两个指标，先按 TDoA 将各个音频分为多个音频集合，再单独对每个音频集合使用 RMS 分析，即得分类结果。<br />\n以下为单个键位集合（[e，s，z]）示例：<br />\n计算 TDoA，取 TDoA=[0.0001,0.00005]，得到由 3 个击键音频组成的集合，根据下图模板，定位为 [e，s，z]&gt; 集合，但是并不能分清哪个音频是 e、哪个音频是 s、哪个音频是 z：<br />\n<img data-src=\"https://i.postimg.cc/hjyCDKNG/TDoA.png\" alt=\"TDoA.png\" /><br />\n 再计算这 3 个击键音频的 RMS，发现一个音频的 RMS 最高（基本可以确认为 e 键）、另一个次之（s 键）、最后一个再次（z 键），如下图：<br />\n<img data-src=\"https://i.postimg.cc/ryhsSsBp/2024-12-14-204657.png\" alt=\"2024-12-14-204657.png\" /></p>\n</blockquote>\n<h2 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> <strong>完整代码</strong></h2>\n<blockquote>\n<p>上述是简单分析和攻击的具体过程，还存在很多问题，欢迎一起交流学习！<br />\n代码和数据整理后将发布在 github 上，应该不会太久喵<sub> (QWQ)</sub></p>\n</blockquote>\n<h2 id=\"参考文献\"><a class=\"anchor\" href=\"#参考文献\">#</a> <strong>参考文献</strong></h2>\n<blockquote>\n<p>[1] Snooping Keystrokes with mm-level Audio Ranging on a Single Phone<br />\n[2] KeystrokeSniffer: An Off-the-Shelf Smartphone Can Eavesdrop on Your Privacy From Anywhere</p>\n</blockquote>\n",
            "tags": [
                "SCA"
            ]
        }
    ]
}