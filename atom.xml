<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://27e7dyy38eu.github.io</id>
    <title>Xiyi&#39;s Blog</title>
    <subtitle>希夷的博客</subtitle>
    <icon>https://27e7dyy38eu.github.io/images/favicon.ico</icon>
    <link href="https://27e7dyy38eu.github.io" />
    <author>
      <name>希夷</name>
    </author>
    <updated>2024-12-14T10:14:38.000Z</updated>
    <entry>
        <id>https://27e7dyy38eu.github.io/2024/12/14/Keyboard-SCA/</id>
        <title>简单SCA：如何使用一部手机得到键盘输入</title>
        <link rel="alternate" href="https://27e7dyy38eu.github.io/2024/12/14/Keyboard-SCA/"/>
        <content type="html">&lt;h1 id=&#34;简单sca如何使用一部手机得到键盘输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单sca如何使用一部手机得到键盘输入&#34;&gt;#&lt;/a&gt; &lt;strong&gt;简单 SCA：如何使用一部手机得到键盘输入&lt;/strong&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文由于数据量小，仅作为可行性分析验证实验！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;攻击思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击思路&#34;&gt;#&lt;/a&gt; &lt;strong&gt;攻击思路&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;重要前提：所有操作和采集的数据都是在极其理想的环境下进行的，即攻击环境无可听噪声、键盘响声十分明显的环境&lt;/strong&gt;&lt;br /&gt;
首先我们应该对攻击对象：键盘，和攻击手段：双麦克风手机，进行细致分析。论文《Snooping Keystrokes with mm-level Audio Ranging on a Single Phone》[1] 可作为分析支撑！&lt;br /&gt;
&lt;strong&gt;下面是论文的分析。但值得注意的是，我们并不需要严格的按照论文对键位进行分类，以实际分析为准，本文实验便是如此。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;tdoa到达时间差差异&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tdoa到达时间差差异&#34;&gt;#&lt;/a&gt; &lt;em&gt;TDoA (到达时间差) 差异&lt;/em&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;TDoA 可以将部分键位区别，论文《KeystrokeSniffer: An Off-the-Shelf Smartphone Can Eavesdrop on Your Privacy From Anywhere》[2] 可作为分析支撑！&lt;br /&gt;
下图（来自论文 [2]）可以分析出，某些键位的 TDoA 值是不同的，且所有键位的 TDoA 值按每列从左到右，每行自上而下排列，会呈现一定规律。该论文也指出两条声波迹的 TDoA 可以通过互相关计算。&lt;br /&gt;
&lt;img data-src=&#34;https://i.postimg.cc/vmy2XqWG/2024-12-14-192348.png&#34; alt=&#34;2024-12-14-192348.png&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;从下图（来自论文 [1]）可以分析出，TDoA 值相同的键位（如：E、D、X 的分布为一精致的双曲线的一半）。&lt;br /&gt;
因此可以将 28 个键位（a-z、space、enter）按 TDoA 值的相近程度划分为几个集合（如：[q]、[w,a]、[s,z]、[e,d,x]、[r,f,c]、[t,g,v] 等）。&lt;br /&gt;
这时，我们已经将猜测域大大缩小，从 n&lt;sup&gt;27&lt;/sup&gt; 缩小到 n^14（n 为键盘输入个数，指数是 27 和 14 而不是 28 和 15 的原因是 enter 键一般不作为密码输入）&lt;br /&gt;
&lt;img data-src=&#34;https://i.postimg.cc/jjG0sQf9/2024-10-18-124832.png&#34; alt=&#34;2024-10-18-124832.png&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;rms均方根差异&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rms均方根差异&#34;&gt;#&lt;/a&gt; &lt;em&gt;RMS (均方根) 差异&lt;/em&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;我们已经缩小了猜测域，但是 n^14 仍然太大了！我们总是希望能更精确的区别出每个对象。&lt;br /&gt;
我们小学就学过平面直角坐标系，确定坐标系内一点需要两个指标 x 和 y，我们的 x 已经找到了（就是 TDoA!）。接下来就是寻找另一个指标，这个指标需要满足能将 TDoA 值相同的键位区别开来，这里我选择了 RMS，用来衡量键位距离手机麦克风的远近，这是基于一个朴素的思想，即在相同的击键力度下（现实难以实现），键位离手机越近，声波中携带的能量越大。但该方法存在很大缺陷！这也是亟待改进的地方。&lt;br /&gt;
可以知道，同一 TDoA 键位集合内位于键盘第一行（从上至下）的键位的 RMS 大于第二行，而第二行的 RMS 大于第三行，如下图 [e,s,z]&lt;br /&gt;
 下图表明了该方法有一定作用。&lt;br /&gt;
&lt;img data-src=&#34;https://i.postimg.cc/3wZSqXBm/2024-12-14-192322.png&#34; alt=&#34;2024-12-14-192322.png&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;攻击步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击步骤&#34;&gt;#&lt;/a&gt; &lt;strong&gt;攻击步骤&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;通过上面的的分析我们已经知道攻击需要得到的两个指标 ----TDoA 和 RMS&lt;br /&gt;
 因此加下来的攻击步骤就是围绕如何得到 TDoA 和 RMS 展开的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;手机采集音频&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手机采集音频&#34;&gt;#&lt;/a&gt; &lt;em&gt;手机采集音频&lt;/em&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;一定要使两个麦克风的连线平行于键盘！！！&lt;br /&gt;
一定要使两个麦克风的连线平行于键盘！！！&lt;br /&gt;
一定要使两个麦克风的连线平行于键盘！！！&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
键盘为青轴，实验手机为 HUAWEI 畅享 20。实验手机倾斜是因为麦克风不对称。&lt;br /&gt;
我的实验环境如下图所示：&lt;br /&gt;
&lt;img data-src=&#34;https://i.postimg.cc/QChP6jvN/QQ-20241214201427.jpg&#34; alt=&#34;QQ-20241214201427.jpg&#34; /&gt;&lt;br /&gt;
 录制方法为每个键位连续击键多下为一个音频文件（本实验为连续 5 下），音波图（q 键连击 5 下，及左右声道）如下：&lt;br /&gt;
&lt;img data-src=&#34;https://i.postimg.cc/qRxhfGDc/Figu2.png&#34; alt=&#34;Figu2.png&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;音频处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#音频处理&#34;&gt;#&lt;/a&gt; &lt;em&gt;音频处理&lt;/em&gt;&lt;/h3&gt;
&lt;h4 id=&#34;音频格式转换m4a-to-wav&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#音频格式转换m4a-to-wav&#34;&gt;#&lt;/a&gt; 音频格式转换（.m4a to .wav）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有在线网站可转换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;去噪&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#去噪&#34;&gt;#&lt;/a&gt; 去噪&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;出于简化的目的，且环境较理想，该步省略。真实攻击必定需要去噪！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;左右声道分割&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#左右声道分割&#34;&gt;#&lt;/a&gt; 左右声道分割&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;由于手机录音成一个.m4a 文件，转为.wav 后，我们需要将左右声道分离，为互相关计算 TDoA 做准备。&lt;br /&gt;
得到音频如下图所示：&lt;br /&gt;
&lt;img data-src=&#34;https://i.postimg.cc/qRxhfGDc/Figu2.png&#34; alt=&#34;Figu2.png&#34; /&gt;&lt;br /&gt;
 代码如下：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import numpy as np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from scipy.io import wavfile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def get_file_list(file_dir):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    获取文件列表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :param file_dir:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :return:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    file_list = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for root, dirs, files in os.walk(file_dir):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for file in files:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if os.path.splitext(file)[1] == &amp;#x27;.wav&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                file_list.append(os.path.join(root, file))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return file_list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def split_channel(wav_path, left_wav_path, right_wav_path):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    通道分离&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :param wav_path: wav音频的路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :param left_wav_path: 左声道的wav音频路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :param right_wav_path: 右声道的wav音频路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :return None:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    try:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sample_rate, wav_data = wavfile.read(wav_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(wav_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(sample_rate)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        left = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        right = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for item in wav_data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left.append(item[0])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right.append(item[1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wavfile.write(left_wav_path, sample_rate, np.array(left))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wavfile.write(right_wav_path, sample_rate, np.array(right))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    except IOError as e:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(&amp;#x27;error is %s&amp;#x27; % str(e))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    except:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(&amp;#x27;other error&amp;#x27;, sys.exc_info())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FILE_INPUT = r&amp;#x27;keystorke_2/before&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FILE_LEFT = r&amp;#x27;keystorke_2/after/&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FILE_RIGHT = r&amp;#x27;keystorke_2/after/&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if __name__ == &amp;#x27;__main__&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    file_list = get_file_list(FILE_INPUT)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(file_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while i &amp;lt; len(file_list):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        print(file_list[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        split_channel(file_list[i], FILE_LEFT + file_list[i][19] +&amp;#x27;_left&amp;#x27;+ &amp;#x27;.wav&amp;#x27;, FILE_RIGHT + file_list[i][19] +&amp;#x27;_right&amp;#x27; + &amp;#x27;.wav&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        i += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;左右声道互相关计算tdoa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#左右声道互相关计算tdoa&#34;&gt;#&lt;/a&gt; &lt;em&gt;左右声道互相关计算 TDoA&lt;/em&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;注意这里用到了左右两个音频文件。&lt;br /&gt;
可视化如下：&lt;br /&gt;
&lt;img data-src=&#34;https://i.postimg.cc/rshDswkK/corr.png&#34; alt=&#34;corr.png&#34; /&gt;&lt;br /&gt;
 代码如下：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import wave&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import numpy as np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def get_file_list(file_dir):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    获取文件列表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :param file_dir:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    :return:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    file_list = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for root, dirs, files in os.walk(file_dir):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for file in files:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if os.path.splitext(file)[1] == &amp;#x27;.wav&amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                file_list.append(os.path.join(root, file))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                continue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return file_list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;INPUT_FILE = r&amp;quot;keystorke_2/after&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;file_list = get_file_list(INPUT_FILE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;while i &amp;lt; len(file_list):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    INPUT_FILE_RIGHT= file_list[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    INPUT_FILE_LEFT = file_list[i+1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f_left = wave.open(INPUT_FILE_LEFT, &amp;quot;rb&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f_right = wave.open(INPUT_FILE_RIGHT, &amp;quot;rb&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    parameters_left = f_left.getparams()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    parameters_right = f_right.getparams()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sr = parameters_left.framerate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    str_byte_data_left = f_left.readframes(parameters_left.nframes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    str_byte_data_right = f_right.readframes(parameters_right.nframes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wave_data_left = np.frombuffer(str_byte_data_left, dtype=np.int16)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wave_data_right = np.frombuffer(str_byte_data_right, dtype=np.int16)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    # 归一化&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wave_data_left = wave_data_left * 1.0 / (max(abs(wave_data_left)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wave_data_right = wave_data_right * 1.0 / (max(abs(wave_data_right)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #通过计算互相关计算时间延迟&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    correlation = np.correlate(wave_data_left, wave_data_right, mode=&amp;#x27;full&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    max_corr_index = np.argmax(correlation)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time_delay = max_corr_index - (len(wave_data_left) - 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TDoAt = time_delay/sr #s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;file = &amp;quot;, file_list[i],end=&amp;#x27; &amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;TDoAt = &amp;quot;, TDoAt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i = i + 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;计算rms&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算rms&#34;&gt;#&lt;/a&gt; &lt;em&gt;计算 RMS&lt;/em&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;注意这里用只到了一个音频文件。&lt;br /&gt;
可视化如下：&lt;br /&gt;
&lt;img data-src=&#34;https://i.postimg.cc/MKFc8H5L/RMS.png&#34; alt=&#34;RMS.png&#34; /&gt;&lt;br /&gt;
 代码如下：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import librosa&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import matplotlib.pyplot as plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import numpy as np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;INPUT_FILE1 = r&amp;quot;keystorke/after_1/p_left.wav&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RMS_THRESHOLD = 0.0075&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RMS_UPPER_BOUND = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RMS_LOWER_BOUND = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FRAME_LENGTH = 512#8192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;HOP_LENGTH = int(FRAME_LENGTH * 0.5)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#计算 RMS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;waveform_1, sr_1 = librosa.load(INPUT_FILE1, sr=None)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RMS_1 = librosa.feature.rms(y=waveform_1, frame_length=FRAME_LENGTH, hop_length=HOP_LENGTH)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RMS_1 = np.mean(RMS_1, axis=0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#可视化&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.title(&amp;quot;Time-RMS&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.xlabel(&amp;quot;Time&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.ylabel(&amp;quot;RMS&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(RMS_1, label=&amp;quot;y&amp;quot;, color=&amp;quot;red&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(RMS_2, label=&amp;quot;h&amp;quot;, color=&amp;quot;green&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# plt.plot(RMS_3, label=&amp;quot;n&amp;quot;, color=&amp;quot;blue&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.legend()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;统计分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统计分析&#34;&gt;#&lt;/a&gt; &lt;em&gt;统计分析&lt;/em&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过计算得到每个音频对应的 TDoA 和 RMS 两个指标，先按 TDoA 将各个音频分为多个音频集合，再单独对每个音频集合使用 RMS 分析，即得分类结果。&lt;br /&gt;
以下为单个键位集合（[e，s，z]）示例：&lt;br /&gt;
计算 TDoA，取 TDoA=[0.0001,0.00005]，得到由 3 个击键音频组成的集合，根据下图模板，定位为 [e，s，z]&amp;gt; 集合，但是并不能分清哪个音频是 e、哪个音频是 s、哪个音频是 z：&lt;br /&gt;
&lt;img data-src=&#34;https://i.postimg.cc/hjyCDKNG/TDoA.png&#34; alt=&#34;TDoA.png&#34; /&gt;&lt;br /&gt;
 再计算这 3 个击键音频的 RMS，发现一个音频的 RMS 最高（基本可以确认为 e 键）、另一个次之（s 键）、最后一个再次（z 键），如下图：&lt;br /&gt;
&lt;img data-src=&#34;https://i.postimg.cc/ryhsSsBp/2024-12-14-204657.png&#34; alt=&#34;2024-12-14-204657.png&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整代码&#34;&gt;#&lt;/a&gt; &lt;strong&gt;完整代码&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;上述是简单分析和攻击的具体过程，还存在很多问题，欢迎一起交流学习！&lt;br /&gt;
代码和数据整理后将发布在 github 上，应该不会太久喵&lt;sub&gt; (QWQ)&lt;/sub&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考文献&#34;&gt;#&lt;/a&gt; &lt;strong&gt;参考文献&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[1] Snooping Keystrokes with mm-level Audio Ranging on a Single Phone&lt;br /&gt;
[2] KeystrokeSniffer: An Off-the-Shelf Smartphone Can Eavesdrop on Your Privacy From Anywhere&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="SCA" scheme="https://27e7dyy38eu.github.io/tags/SCA/" />
        <updated>2024-12-14T10:14:38.000Z</updated>
    </entry>
</feed>
